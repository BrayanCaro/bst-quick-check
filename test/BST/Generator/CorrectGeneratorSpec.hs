{-# LANGUAGE ScopedTypeVariables #-}

module BST.Generator.CorrectGeneratorSpec (spec) where

import Test.Hspec
import Test.QuickCheck
import BST.Data
import BST.Operations

spec :: Spec
spec = do
  it "el 치rbol generado es v치lido" $ do
    property $ prop_Valid
  it "shrink genera arboles v치lidos cuando el 치rbol generado ya era v치lido" $ do
    property $ prop_ShrinkValid

{-
   El siguiente generador ya crea 치rboles correctos a칰n cuando los encojemos con shrink

   Se puede comprobar usando:

   ```
   $ stack repl test/BST/Generator/CorrectGeneratorSpec.hs
   > genericShrink (Branch (Branch Leaf (-1) 0 Leaf) 0 0 Leaf :: Tree)
   > [...]    -- <---- 춰ya todos son v치lidos 游꿀!
   ```

   ---
   Nota: Se pueden obtener una instancia de los 치rboles generados con:

   ```
   $ stack repl test/BST/Generator/CorrectGeneratorSpec.hs
   > generate arbitrary :: IO Tree
   ```
-}
instance (Ord k, Arbitrary k, Arbitrary v) => Arbitrary (BST k v) where
  arbitrary = do
    items <- arbitrary
    return $ foldr (uncurry insert) Leaf (items :: [(k,v)])
  shrink = filter valid . genericShrink -- Se agrego el filtro

{-
   Es v치lido pensar en verificar si nuestros 치rboles generados son v치lidos
   por la necesidad de garantizar que todos los nodos hijos derechos tienen llaves menores al nodo actual,
   lo mismo para los izquierdos, pero sus llaves tienen que ser mayores.

   Si nuestra generaci칩n de 치rboles es erronea, entonces QuickCheck nos dir치 que las
   operaciones que realicemos (insert, delete, union, ...) est치n mal cuando es un falso positivo,
   pues el problema es la generaci칩n con Arbitrary.
-}
prop_Valid :: Tree -> Bool
prop_Valid t = valid t

{-
   Tambi칠n es necesario verificar que los 치rboles que encogemos siguen
   siendo v치lidos, y si no, solo quedarnos son los que si lo son.
-}
prop_ShrinkValid :: Tree -> Property
prop_ShrinkValid t = valid t ==> filter (not . valid) (shrink t) === []
